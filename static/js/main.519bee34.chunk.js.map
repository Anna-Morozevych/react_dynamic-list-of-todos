{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api/api.ts","App.tsx","index.tsx"],"names":["TodoList","todos","onClickSelectUser","useState","inputValue","setInputValue","selectValue","setSelectValue","className","type","value","onChange","event","target","name","arr","titleValue","copyTodos","completedValue","filter","todo","completed","todosSelectArrFilter","title","includes","preparedTodosArr","map","classNames","htmlFor","id","toString","readOnly","checked","onClick","userId","CurrentUser","selectedUser","currentUser","setCurrentUser","useEffect","fetch","then","response","json","users","find","user","email","phone","App","selectedUserId","setSelectedUserId","todosList","setTodosList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.519bee34.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onClickSelectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onClickSelectUser,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n\n  const todosSelectArrFilter = (arr: Todo[], completedValue: string) => {\n    switch (completedValue) {\n      case 'active':\n        return arr.filter(todo => todo.completed === false);\n\n      case 'completed':\n        return arr.filter(todo => todo.completed === true);\n\n      default:\n        return arr;\n    }\n  };\n\n  const todosInputFilter = (arr: Todo[], titleValue: string) => {\n    if (!titleValue) {\n      return arr;\n    }\n\n    return arr.filter(todo => todo.title.includes(titleValue));\n  };\n\n  const preparedTodosArr = () => {\n    const copyTodos = [...todos];\n\n    const filterByInput = todosInputFilter(copyTodos, inputValue);\n\n    const filterBySelect = todosSelectArrFilter(filterByInput, selectValue);\n\n    return filterBySelect;\n  };\n\n  const handlerInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectValue(event.target.value);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <input\n          className=\"TodoList__input\"\n          type=\"text\"\n          value={inputValue}\n          onChange={handlerInput}\n        />\n\n        <select\n          className=\"TodoList__input\"\n          name=\"select\"\n          onChange={handleSelect}\n        >\n          <option value=\"all\">\n            All\n          </option>\n\n          <option value=\"active\">\n            Active\n          </option>\n\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodosArr().map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label htmlFor={todo.id.toString()}>\n                <input\n                  id={todo.id.toString()}\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => onClickSelectUser(todo.userId)}\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\ntype Props = {\n  selectedUser: number,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUser }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedUser) {\n      getUsers(selectedUser)\n        .then(users => setCurrentUser(users));\n    }\n  }, [selectedUser]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser}`}</span></h2>\n      {selectedUser && (\n        <>\n          <h3 className=\"CurrentUser__name\">{currentUser?.name}</h3>\n          <p className=\"CurrentUser__email\">{currentUser?.email}</p>\n          <p className=\"CurrentUser__phone\">{currentUser?.phone}</p>\n        </>\n      )}\n    </div>\n  );\n};\n","const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nconst API_URL_USERS = 'https://mate.academy/students-api/users';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(API_URL_TODOS)\n    .then(response => response.json());\n}\n\nexport function getUsers(userId: number) {\n  return fetch(`${API_URL_USERS}`)\n    .then(response => response.json())\n    .then(users => {\n      return users.find((user: { id: number; }) => user.id === userId);\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todosList, setTodosList] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => setTodosList(todos));\n  }, []);\n\n  const handlerSelectUser = (userId: number): void => {\n    setSelectedUserId(userId);\n  };\n\n  const clearHandler = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todosList}\n          onClickSelectUser={handlerSelectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={clearHandler}\n              >\n                Clear\n              </button>\n              <CurrentUser\n                selectedUser={selectedUserId}\n              />\n            </>\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}